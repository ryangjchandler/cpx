#!/usr/bin/env php
<?php

use Cpx\Utils;
use TitasGailius\Terminal\Terminal;

if (file_exists(__DIR__.'/../../../autoload.php')) {
    require __DIR__.'/../../../autoload.php';
} else {
    require __DIR__.'/vendor/autoload.php';
}

\Cpx\Cpx::run($argv);

// function getArguments($index = null) {
//     global $argv;

//     $args = $argv;

//     array_shift($args);

//     return $index !== null ? $args[$index] : $args;
// }

// function getComposerJsonFor($package) {
//     $composerDir = Utils::globalComposerDirectory();

//     if (! is_dir($composerDir.'/vendor')) {
//         throw new Exception('Composer does not have any global packages installed.');
//     }

//     $file = implode('', [
//         $composerDir,
//         '/vendor/',
//         $package,
//         '/composer.json'
//     ]);

//     return json_decode(file_get_contents($file), true);
// }

// function getComposerBinPathFor($bin) {
//     $composerDir = Utils::globalComposerDirectory();

//     if (! is_dir($composerDir.'/vendor')) {
//         throw new Exception('Composer does not have any global packages installed.');
//     }

//     $path = implode('', [
//         $composerDir,
//         '/vendor/bin/',
//         $bin,
//     ]);

//     if (! is_executable($path)) {
//         throw new Exception('Binary '.$bin.' is not executable.');
//     }

//     return $path;
// }

// function isInstalledGlobally($package) {
//     $response = Terminal::run("composer global show {$package}");

//     return $response->successful();
// }

// function removePackage($package) {
//     Terminal::run("composer global remove {$package} --quiet");
// }

// $packageName = getArguments(0);

// $shouldRemovePackageUponCompletion = false;

// if (! isInstalledGlobally($packageName)) {
//     $installCommand = "composer global require {$packageName} --quiet";

//     $response = Terminal::run($installCommand);

//     $response->throw();

//     $shouldRemovePackageUponCompletion = true;
// }

// $json = getComposerJsonFor($packageName);

// if (! array_key_exists('bin', $json)) {
//     if ($shouldRemovePackageUponCompletion) {
//         removePackage($packageName);
//     }

//     throw new Exception('This package does not have any binaries.');
// }

// $bin = array_shift($json['bin']);
// $parts = explode('/', $bin);
// $binName = array_pop($parts);
// $arguments = getArguments();

// unset($arguments[0]);

// $command = implode(' ', [
//     PHP_BINARY,
//     getComposerBinPathFor($binName),
//     implode(' ', $arguments),
// ]);

// $response = Terminal::tty(true)->run($command);

// try {
//     $response->throw();
// } catch (\Throwable $e) {
//     if ($shouldRemovePackageUponCompletion) {
//         removePackage($packageName);
//     }

//     throw $e;
// }

// print $response->output();

// if ($shouldRemovePackageUponCompletion) {
//     removePackage($packageName);
// }